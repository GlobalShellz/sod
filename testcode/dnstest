#!/usr/bin/perl

use Modern::Perl;

use Net::DNS;

my $type = "PTR";

my $server_list = 'dnsservers';
open(SERVERLST, $server_list) || warn ("Failed to open server list $server_list - $!");


my @available_servers;
my @answer_list;
my @t;

for my $line (<SERVERLST>) {
	next if $line =~ /^(#|$)/;
	my %data;

	@data{qw(ip host note)} = split /\s+/, $line, 3;
	push @available_servers, {%data};
}
close SERVERLST;

my $A = 91;
my $B = 121;
my $C = 194;
my $D = 164;

print "\n";

#my $server = ((sort { (-1,1)[rand 2] } @available_servers)[1]);
my $server;

my $x = 0;

my @childs;

for $server (@available_servers) {
	my $pid = fork();
	if ($pid) {
		push(@childs, $pid);
	} elsif ($pid == 0) {
		

		open(DNS, '>>fastdnsservers');

		my $domain = "$A.$B.$C.$D";


		my $resolver   = Net::DNS::Resolver->new(
			nameservers => [ $server->{ip} ],
			recurse     => 1,
			debug       => 0,
			retry       => 1,
		);

		$resolver->tcp_timeout(4);

		my $result = $resolver->query($domain, $type);
	
		if ($result) {

			my @answers = $result->answer;
			for my $answer (@answers) {
	        		my %answerdata;
			        @answerdata{qw(host ttl type class val)} =
        			    split /\s+/, $answer->string, 5;
	
			        push @answer_list, {%answerdata};
        			push @t, $answerdata{host};

				if ( $answerdata{val} =~ /navi\.flyingdutchmen\.be\./ ) {
					print "\n $server->{ip} OK.\n";
					print DNS "$server->{ip}       \n";
				} else {
					print "\n $server->{ip} NOK.\n";
				}
			}
		} else {
			print "\n $server->{ip} NOK.\n";
		}
		exit 0;
	}
	if ( $x < 50 ) {
		$x++
	} else {
		$x = 0;
		foreach (@childs) {
			waitpid($_, 0);
		}
	}
}
close (DNS);
print "\n";
#for my $answer (@answer_list) {
#		print "\n @$answer{ qw(class host val ttl) }\n";
#}
