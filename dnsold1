#!/usr/bin/perl

use Modern::Perl;

use Net::DNS;

my $type = "PTR";

my $server_list = 'dnsres';
open(SERVERLST, $server_list) || warn ("Failed to open server list $server_list - $!");

my @available_servers;
my @answer_list;
my @t;

for my $line (<SERVERLST>) {
	next if $line =~ /^(#|$)/;
	my %data;

	@data{qw(ip host note)} = split /\s+/, $line, 3;
	push @available_servers, {%data};
}
close SERVERLST;

my $a = 68;
my $b = 67;
my $c = 76;
my $d = 1;
my $i = 0;

#for ( $d = 1; $d < 255; $d++) {
#	my $server = ((sort { (-1,1)[rand 2] } @available_servers)[1]);
my @resolver;
my @server;
my @var1;
my @var2;
while ( $d < 254 ) {
	my @childs;
	my $z;
	if ( $d < 250 ) {
		$z = 10;
	} else {
		$z = 4;
	}
	if ( $i > ($#available_servers - 10) ) {
		$i = 0;
	}
	for ( my $k = 0; $k < $z; $k++ ) {	
		my $pid = fork();
		if ($pid) {
			#parent
			push(@childs, $pid);
		} elsif ($pid == 0) {
			$var1[$k] = $d + $k;

			$var2[$k] = $i + $k;
			$server[$var1[$k]] = $available_servers[$var2[$k]];
			my $domain = "$a.$b.$c.$var1[$k]";


			$resolver[$var1[$k]]   = Net::DNS::Resolver->new(
				nameservers => [ $server[$var1[$k]]->{ip} ],
				recurse     => 1,
				debug       => 0,
				retry       => 1,
			);

			$resolver[$var1[$k]]->tcp_timeout(4);

			my $result = $resolver[$var1[$k]]->query($domain, $type);

			if ($result) {
				my @answers = $result->answer;
				for my $answer (@answers) {
		        		my %answerdata;
				        @answerdata{qw(host ttl type class val)} =
        				    split /\s+/, $answer->string, 5;
	
			        	push @answer_list, {%answerdata};
			        	push @t, $answerdata{host};

				}
				
			}
			exit 0;
		}
	}
	foreach (@childs) {
		waitpid($_, 0);
	}

	$i = $i + 10;
	$d = $d + 10;
}
for my $answer (@answer_list) {
		print "\n @$answer{ qw(class host val ttl) }\n";
}
